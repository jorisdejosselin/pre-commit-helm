# Pre-commit configuration for the pre-commit-helm repository itselff
repos:
  # Standard pre-commit hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
        args: ["--allow-multiple-documents"]
      - id: check-added-large-files
        args: ["--maxkb=1000"]
      - id: check-merge-conflict
      - id: mixed-line-ending
        args: ["--fix=lf"]
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-json
      - id: pretty-format-json
        args: ["--autofix"]
      - id: check-toml
      - id: check-xml

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.5
    hooks:
      - id: shellcheck
        args: ["--severity=warning", "--exclude=SC2034"]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.45.0
    hooks:
      - id: markdownlint
        args: ["--fix", "--disable", "MD013"]

  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.1.0
    hooks:
      - id: prettier
        types: [yaml]

  # Commit message linting
  - repo: https://github.com/alessandrojcm/commitlint-pre-commit-hook
    rev: v9.22.0
    hooks:
      - id: commitlint
        stages: [commit-msg]
        additional_dependencies:
          ["@commitlint/config-conventional@^17.6.0", "@commitlint/cli@^17.6.0"]

  # Security checks
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.5.0
    hooks:
      - id: detect-secrets
        args: ["--baseline", ".secrets.baseline"]

  # Local hooks for testing our own scripts
  - repo: local
    hooks:
      # Test that all hook scripts are executable and have proper shebangs
      - id: test-hook-scripts
        name: Test Hook Scripts
        entry: bash -c 'for script in hooks/*.sh; do echo "Testing $script"; bash -n "$script" || exit 1; done'
        language: system
        files: 'hooks/.*\.sh$'

      # Validate .pre-commit-hooks.yaml structure
      - id: validate-hook-config
        name: Validate Hook Configuration
        entry: bash -c 'if command -v python3 &> /dev/null; then python3 -c "import yaml; yaml.safe_load(open(\".pre-commit-hooks.yaml\"))" 2>/dev/null || echo "Hook config YAML validation skipped (PyYAML not available)"; else echo "Hook config validation skipped (python3 not available)"; fi'
        language: system
        files: '\.pre-commit-hooks\.yaml$'

      # Check that all hooks mentioned in .pre-commit-hooks.yaml have corresponding scripts
      - id: check-hook-scripts-exist
        name: Check Hook Scripts Exist
        entry: bash
        args:
          [
            "-c",
            'for script in hooks/*.sh; do [ -f "$script" ] && [ -x "$script" ] || { echo "Missing or non-executable: $script"; exit 1; }; done; echo "All hook scripts exist and are executable"',
          ]
        language: system
        files: 'hooks/.*\.sh$'

      # Test package.json syntax
      - id: validate-package-json
        name: Validate package.json
        entry: python3 -c "import json; json.load(open('package.json'))"
        language: system
        files: 'package\.json$'

      # Test semantic-release configuration
      - id: validate-release-config
        name: Validate Release Configuration
        entry: python3 -c "import json; json.load(open('.releaserc.json'))"
        language: system
        files: '\.releaserc\.json$'
