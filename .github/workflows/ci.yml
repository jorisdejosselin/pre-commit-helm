name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  helm-lint:
    runs-on: ubuntu-latest
    container:
      image: alpine/helm:3.14.0
      options: --user root
    strategy:
      matrix:
        helm-version: ["3.12.0", "3.13.0", "3.14.0"]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Helm version
        run: |
          if [ "${{ matrix.helm-version }}" != "3.14.0" ]; then
            apk add --no-cache wget
            wget https://get.helm.sh/helm-v${{ matrix.helm-version }}-linux-amd64.tar.gz
            tar xf helm-v${{ matrix.helm-version }}-linux-amd64.tar.gz
            mv linux-amd64/helm /usr/local/bin/helm
            chmod +x /usr/local/bin/helm
          fi
      
      - name: Create test chart
        run: |
          mkdir -p test-chart/templates test-chart/tests
          cat > test-chart/Chart.yaml << 'EOF'
          apiVersion: v2
          name: test-chart
          description: A test Helm chart
          type: application
          version: 0.1.0
          appVersion: "1.0"
          EOF
          
          cat > test-chart/values.yaml << 'EOF'
          replicaCount: 1
          image:
            repository: nginx
            tag: "1.21"
            pullPolicy: IfNotPresent
          service:
            type: ClusterIP
            port: 80
          EOF
          
          cat > test-chart/templates/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: {{ include "test-chart.fullname" . }}
            labels:
              {{- include "test-chart.labels" . | nindent 4 }}
          spec:
            replicas: {{ .Values.replicaCount }}
            selector:
              matchLabels:
                {{- include "test-chart.selectorLabels" . | nindent 6 }}
            template:
              metadata:
                labels:
                  {{- include "test-chart.selectorLabels" . | nindent 8 }}
              spec:
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 1000
                  fsGroup: 2000
                containers:
                - name: {{ .Chart.Name }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  securityContext:
                    allowPrivilegeEscalation: false
                    readOnlyRootFilesystem: true
                    runAsNonRoot: true
                    runAsUser: 1000
                    capabilities:
                      drop:
                        - ALL
                  ports:
                  - name: http
                    containerPort: 80
                    protocol: TCP
          EOF
          
          cat > test-chart/templates/_helpers.tpl << 'EOF'
          {{- define "test-chart.name" -}}
          {{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
          {{- end }}
          
          {{- define "test-chart.fullname" -}}
          {{- if .Values.fullnameOverride }}
          {{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- $name := default .Chart.Name .Values.nameOverride }}
          {{- if contains $name .Release.Name }}
          {{- .Release.Name | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
          {{- end }}
          {{- end }}
          {{- end }}
          
          {{- define "test-chart.labels" -}}
          helm.sh/chart: {{ include "test-chart.chart" . }}
          {{ include "test-chart.selectorLabels" . }}
          {{- if .Chart.AppVersion }}
          app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
          {{- end }}
          app.kubernetes.io/managed-by: {{ .Release.Service }}
          {{- end }}
          
          {{- define "test-chart.selectorLabels" -}}
          app.kubernetes.io/name: {{ include "test-chart.name" . }}
          app.kubernetes.io/instance: {{ .Release.Name }}
          {{- end }}
          
          {{- define "test-chart.chart" -}}
          {{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
          {{- end }}
          EOF
      
      - name: Test helm-lint
        run: ./hooks/helm-lint.sh
      
      - name: Test helm-template
        run: ./hooks/helm-template.sh

  helm-unittest:
    runs-on: ubuntu-latest
    container:
      image: alpine/helm:3.14.0
      options: --user root
    steps:
      - uses: actions/checkout@v4
      
      - name: Install helm-unittest
        run: |
          apk add --no-cache bash
          helm plugin install https://github.com/helm-unittest/helm-unittest
      
      - name: Create test chart with unit tests
        run: |
          mkdir -p test-chart/templates test-chart/tests
          cat > test-chart/Chart.yaml << 'EOF'
          apiVersion: v2
          name: test-chart
          description: A test Helm chart
          type: application
          version: 0.1.0
          appVersion: "1.0"
          EOF
          
          cat > test-chart/values.yaml << 'EOF'
          replicaCount: 1
          image:
            repository: nginx
            tag: "1.21"
            pullPolicy: IfNotPresent
          EOF
          
          cat > test-chart/templates/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: {{ include "test-chart.fullname" . }}
          spec:
            replicas: {{ .Values.replicaCount }}
            selector:
              matchLabels:
                app: {{ include "test-chart.name" . }}
            template:
              metadata:
                labels:
                  app: {{ include "test-chart.name" . }}
              spec:
                containers:
                - name: {{ .Chart.Name }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
          EOF
          
          cat > test-chart/templates/_helpers.tpl << 'EOF'
          {{- define "test-chart.name" -}}
          {{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
          {{- end }}
          
          {{- define "test-chart.fullname" -}}
          {{- if .Values.fullnameOverride }}
          {{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- $name := default .Chart.Name .Values.nameOverride }}
          {{- if contains $name .Release.Name }}
          {{- .Release.Name | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
          {{- end }}
          {{- end }}
          {{- end }}
          EOF
          
          cat > test-chart/tests/deployment_test.yaml << 'EOF'
          suite: test deployment
          templates:
            - deployment.yaml
          tests:
            - it: should create deployment
              asserts:
                - isKind:
                    of: Deployment
                - equal:
                    path: metadata.name
                    value: RELEASE-NAME-test-chart
                - equal:
                    path: spec.replicas
                    value: 1
          EOF
      
      - name: Test helm-unittest
        run: ./hooks/helm-unittest.sh

  helm-docs:
    runs-on: ubuntu-latest
    container:
      image: golang:1.21-alpine
      options: --user root
    steps:
      - uses: actions/checkout@v4
      
      - name: Install helm-docs
        run: |
          apk add --no-cache bash git
          go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest
          export PATH="/root/go/bin:$PATH"
          ln -s /root/go/bin/helm-docs /usr/local/bin/helm-docs
      
      - name: Create test chart
        run: |
          mkdir -p test-chart/templates
          cat > test-chart/Chart.yaml << 'EOF'
          apiVersion: v2
          name: test-chart
          description: A test Helm chart
          type: application
          version: 0.1.0
          appVersion: "1.0"
          EOF
          
          cat > test-chart/values.yaml << 'EOF'
          # Default values for test-chart
          replicaCount: 1
          image:
            repository: nginx
            tag: "1.21"
            pullPolicy: IfNotPresent
          EOF
      
      - name: Test helm-docs
        run: ./hooks/helm-docs.sh

  trivy-security:
    runs-on: ubuntu-latest
    container:
      image: aquasec/trivy:latest
      options: --user root --entrypoint=""
    steps:
      - uses: actions/checkout@v4
      
      - name: Install required tools
        run: |
          apk add --no-cache bash curl wget
          # Install helm
          wget https://get.helm.sh/helm-v3.14.0-linux-amd64.tar.gz
          tar xf helm-v3.14.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          chmod +x /usr/local/bin/helm
      
      - name: Create test chart
        run: |
          mkdir -p test-chart/templates
          cat > test-chart/Chart.yaml << 'EOF'
          apiVersion: v2
          name: test-chart
          description: A test Helm chart
          type: application
          version: 0.1.0
          appVersion: "1.0"
          EOF
          
          cat > test-chart/values.yaml << 'EOF'
          replicaCount: 1
          image:
            repository: nginx
            tag: "1.21"
            pullPolicy: IfNotPresent
          EOF
          
          cat > test-chart/templates/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: {{ include "test-chart.fullname" . }}
          spec:
            replicas: {{ .Values.replicaCount }}
            selector:
              matchLabels:
                app: {{ include "test-chart.name" . }}
            template:
              metadata:
                labels:
                  app: {{ include "test-chart.name" . }}
              spec:
                securityContext:
                  runAsNonRoot: true
                  runAsUser: 1000
                  fsGroup: 2000
                containers:
                - name: {{ .Chart.Name }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  securityContext:
                    allowPrivilegeEscalation: false
                    readOnlyRootFilesystem: true
                    runAsNonRoot: true
                    runAsUser: 1000
                    capabilities:
                      drop:
                        - ALL
                  ports:
                  - name: http
                    containerPort: 80
                    protocol: TCP
          EOF
          
          cat > test-chart/templates/_helpers.tpl << 'EOF'
          {{- define "test-chart.name" -}}
          {{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
          {{- end }}
          
          {{- define "test-chart.fullname" -}}
          {{- if .Values.fullnameOverride }}
          {{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- $name := default .Chart.Name .Values.nameOverride }}
          {{- if contains $name .Release.Name }}
          {{- .Release.Name | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
          {{- end }}
          {{- end }}
          {{- end }}
          EOF
      
      - name: Test helm-security
        run: ./hooks/helm-security.sh

  kubeval:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
      options: --user root
    steps:
      - uses: actions/checkout@v4
      
      - name: Install tools
        run: |
          apk add --no-cache bash curl wget
          # Install helm
          wget https://get.helm.sh/helm-v3.14.0-linux-amd64.tar.gz
          tar xf helm-v3.14.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          chmod +x /usr/local/bin/helm
          
          # Install kubeval
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          mv kubeval /usr/local/bin/kubeval
          chmod +x /usr/local/bin/kubeval
      
      - name: Create test chart
        run: |
          mkdir -p test-chart/templates
          cat > test-chart/Chart.yaml << 'EOF'
          apiVersion: v2
          name: test-chart
          description: A test Helm chart
          type: application
          version: 0.1.0
          appVersion: "1.0"
          EOF
          
          cat > test-chart/values.yaml << 'EOF'
          replicaCount: 1
          image:
            repository: nginx
            tag: "1.21"
            pullPolicy: IfNotPresent
          EOF
          
          cat > test-chart/templates/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: {{ include "test-chart.fullname" . }}
          spec:
            replicas: {{ .Values.replicaCount }}
            selector:
              matchLabels:
                app: {{ include "test-chart.name" . }}
            template:
              metadata:
                labels:
                  app: {{ include "test-chart.name" . }}
              spec:
                containers:
                - name: {{ .Chart.Name }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  ports:
                  - name: http
                    containerPort: 80
                    protocol: TCP
          EOF
          
          cat > test-chart/templates/_helpers.tpl << 'EOF'
          {{- define "test-chart.name" -}}
          {{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
          {{- end }}
          
          {{- define "test-chart.fullname" -}}
          {{- if .Values.fullnameOverride }}
          {{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- $name := default .Chart.Name .Values.nameOverride }}
          {{- if contains $name .Release.Name }}
          {{- .Release.Name | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
          {{- end }}
          {{- end }}
          {{- end }}
          EOF
      
      - name: Test helm-kubeval
        run: ./hooks/helm-kubeval.sh

  pre-commit-integration:
    runs-on: ubuntu-latest
    container:
      image: python:3.11-alpine
      options: --user root
    steps:
      - uses: actions/checkout@v4
      
      - name: Install tools
        run: |
          apk add --no-cache bash curl wget git go
          # Install helm
          wget https://get.helm.sh/helm-v3.14.0-linux-amd64.tar.gz
          tar xf helm-v3.14.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          chmod +x /usr/local/bin/helm
          
          # Install pre-commit
          pip install pre-commit
          
          # Install helm-unittest
          helm plugin install https://github.com/helm-unittest/helm-unittest
      
      - name: Create test chart
        run: |
          mkdir -p test-chart/templates test-chart/tests
          cat > test-chart/Chart.yaml << 'EOF'
          apiVersion: v2
          name: test-chart
          description: A test Helm chart
          type: application
          version: 0.1.0
          appVersion: "1.0"
          EOF
          
          cat > test-chart/values.yaml << 'EOF'
          replicaCount: 1
          image:
            repository: nginx
            tag: "1.21"
            pullPolicy: IfNotPresent
          EOF
          
          cat > test-chart/templates/deployment.yaml << 'EOF'
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: {{ include "test-chart.fullname" . }}
          spec:
            replicas: {{ .Values.replicaCount }}
            selector:
              matchLabels:
                app: {{ include "test-chart.name" . }}
            template:
              metadata:
                labels:
                  app: {{ include "test-chart.name" . }}
              spec:
                containers:
                - name: {{ .Chart.Name }}
                  image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                  imagePullPolicy: {{ .Values.image.pullPolicy }}
                  ports:
                  - name: http
                    containerPort: 80
                    protocol: TCP
          EOF
          
          cat > test-chart/templates/_helpers.tpl << 'EOF'
          {{- define "test-chart.name" -}}
          {{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
          {{- end }}
          
          {{- define "test-chart.fullname" -}}
          {{- if .Values.fullnameOverride }}
          {{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- $name := default .Chart.Name .Values.nameOverride }}
          {{- if contains $name .Release.Name }}
          {{- .Release.Name | trunc 63 | trimSuffix "-" }}
          {{- else }}
          {{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
          {{- end }}
          {{- end }}
          {{- end }}
          EOF
          
          cat > test-chart/tests/deployment_test.yaml << 'EOF'
          suite: test deployment
          templates:
            - deployment.yaml
          tests:
            - it: should create deployment
              asserts:
                - isKind:
                    of: Deployment
                - equal:
                    path: metadata.name
                    value: RELEASE-NAME-test-chart
                - equal:
                    path: spec.replicas
                    value: 1
          EOF
      
      - name: Test pre-commit integration
        run: |
          cat > .pre-commit-config.yaml << 'EOF'
          repos:
            - repo: local
              hooks:
                - id: helm-lint
                  name: Helm Lint
                  entry: hooks/helm-lint.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|.*\.tpl)$'
                - id: helm-template
                  name: Helm Template
                  entry: hooks/helm-template.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|.*\.tpl)$'
                - id: helm-unittest
                  name: Helm Unit Test
                  entry: hooks/helm-unittest.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|.*\.tpl)$'
          EOF
          
          pre-commit run --all-files

  commit-lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate PR commits with commitlint
        run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose