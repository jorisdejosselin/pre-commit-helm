name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        helm-version: ['3.12.0', '3.13.0', '3.14.0']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: ${{ matrix.helm-version }}
    
    - name: Install dependencies
      run: |
        # Install helm-unittest plugin
        helm plugin install https://github.com/helm-unittest/helm-unittest
        
        # Install helm-docs
        go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest
        
        # Install trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Install kubeval
        wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
        tar xf kubeval-linux-amd64.tar.gz
        sudo cp kubeval /usr/local/bin
    
    - name: Install pre-commit
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit
    
    - name: Create test chart
      run: |
        mkdir -p test-chart/templates test-chart/tests
        cat > test-chart/Chart.yaml << 'EOF'
        apiVersion: v2
        name: test-chart
        description: A test Helm chart
        type: application
        version: 0.1.0
        appVersion: "1.0"
        EOF
        
        cat > test-chart/values.yaml << 'EOF'
        replicaCount: 1
        image:
          repository: nginx
          tag: "1.21"
          pullPolicy: IfNotPresent
        service:
          type: ClusterIP
          port: 80
        EOF
        
        cat > test-chart/templates/deployment.yaml << 'EOF'
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: {{ include "test-chart.fullname" . }}
          labels:
            {{- include "test-chart.labels" . | nindent 4 }}
        spec:
          replicas: {{ .Values.replicaCount }}
          selector:
            matchLabels:
              {{- include "test-chart.selectorLabels" . | nindent 6 }}
          template:
            metadata:
              labels:
                {{- include "test-chart.selectorLabels" . | nindent 8 }}
            spec:
              containers:
              - name: {{ .Chart.Name }}
                image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
                imagePullPolicy: {{ .Values.image.pullPolicy }}
                ports:
                - name: http
                  containerPort: 80
                  protocol: TCP
        EOF
        
        cat > test-chart/templates/_helpers.tpl << 'EOF'
        {{- define "test-chart.name" -}}
        {{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" }}
        {{- end }}
        
        {{- define "test-chart.fullname" -}}
        {{- if .Values.fullnameOverride }}
        {{- .Values.fullnameOverride | trunc 63 | trimSuffix "-" }}
        {{- else }}
        {{- $name := default .Chart.Name .Values.nameOverride }}
        {{- if contains $name .Release.Name }}
        {{- .Release.Name | trunc 63 | trimSuffix "-" }}
        {{- else }}
        {{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" }}
        {{- end }}
        {{- end }}
        {{- end }}
        
        {{- define "test-chart.labels" -}}
        helm.sh/chart: {{ include "test-chart.chart" . }}
        {{ include "test-chart.selectorLabels" . }}
        {{- if .Chart.AppVersion }}
        app.kubernetes.io/version: {{ .Chart.AppVersion | quote }}
        {{- end }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        {{- end }}
        
        {{- define "test-chart.selectorLabels" -}}
        app.kubernetes.io/name: {{ include "test-chart.name" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        {{- end }}
        
        {{- define "test-chart.chart" -}}
        {{- printf "%s-%s" .Chart.Name .Chart.Version | replace "+" "_" | trunc 63 | trimSuffix "-" }}
        {{- end }}
        EOF
        
        cat > test-chart/tests/deployment_test.yaml << 'EOF'
        suite: test deployment
        templates:
          - deployment.yaml
        tests:
          - it: should create deployment
            asserts:
              - isKind:
                  of: Deployment
              - equal:
                  path: metadata.name
                  value: RELEASE-NAME-test-chart
              - equal:
                  path: spec.replicas
                  value: 1
        EOF
    
    - name: Test hooks individually
      run: |
        # Test helm-lint
        ./hooks/helm-lint.sh
        
        # Test helm-template
        ./hooks/helm-template.sh
        
        # Test helm-unittest
        ./hooks/helm-unittest.sh
        
        # Test helm-docs
        ./hooks/helm-docs.sh
        
        # Test helm-security (with relaxed severity for testing)
        TRIVY_SEVERITY=CRITICAL ./hooks/helm-security.sh
        
        # Test helm-kubeval
        ./hooks/helm-kubeval.sh --kubernetes-version 1.28.0
    
    - name: Test pre-commit integration
      run: |
        cat > .pre-commit-config.yaml << 'EOF'
        repos:
          - repo: local
            hooks:
              - id: helm-lint
                name: Helm Lint
                entry: hooks/helm-lint.sh
                language: script
                files: '(Chart\.yaml|values\.yaml|.*\.tpl)$'
              - id: helm-template
                name: Helm Template
                entry: hooks/helm-template.sh
                language: script
                files: '(Chart\.yaml|values\.yaml|.*\.tpl)$'
        EOF
        
        pre-commit run --all-files

  commit-lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install commitlint
      run: |
        npm install --save-dev @commitlint/config-conventional @commitlint/cli
    
    - name: Validate current commit (last commit) with commitlint
      if: github.event_name == 'push'
      run: npx commitlint --from HEAD~1 --to HEAD --verbose
    
    - name: Validate PR commits with commitlint
      if: github.event_name == 'pull_request'
      run: npx commitlint --from ${{ github.event.pull_request.head.sha }}~${{ github.event.pull_request.commits }} --to ${{ github.event.pull_request.head.sha }} --verbose