name: Test Pre-commit Hooks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main, develop]

jobs:
  test-hooks-against-test-repo:
    runs-on: ubuntu-latest
    container:
      image: python:3.13-alpine@sha256:9b4929a72599b6c6389ece4ecbf415fd1355129f22bb92bb137eea098f05e975
      options: --user root
    steps:
      - name: Checkout pre-commit-helm
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          path: pre-commit-helm

      - name: Clone test-helm-repo
        run: |
          apk add --no-cache git
          git clone https://github.com/jorisdejosselin/test-helm-repo.git test-helm-repo
          cd test-helm-repo
          echo "Test repo cloned successfully"
          ls -la
          echo "Current commit:"
          git log --oneline -1

      - name: Setup tools
        run: |
          apk add --no-cache bash curl wget git go

          # Install helm
          wget https://get.helm.sh/helm-v3.14.0-linux-amd64.tar.gz
          tar xf helm-v3.14.0-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          chmod +x /usr/local/bin/helm

          # Install pre-commit
          pip install pre-commit

          # Install helm-unittest
          helm plugin install https://github.com/helm-unittest/helm-unittest

          # Install helm-docs
          go install github.com/norwoodj/helm-docs/cmd/helm-docs@latest
          ln -s /root/go/bin/helm-docs /usr/local/bin/helm-docs

          # Install trivy
          wget -qO- https://github.com/aquasecurity/trivy/releases/download/v0.55.2/trivy_0.55.2_Linux-64bit.tar.gz | tar xz
          mv trivy /usr/local/bin/trivy
          chmod +x /usr/local/bin/trivy

          # Install kubeval
          wget https://github.com/instrumenta/kubeval/releases/latest/download/kubeval-linux-amd64.tar.gz
          tar xf kubeval-linux-amd64.tar.gz
          mv kubeval /usr/local/bin/kubeval
          chmod +x /usr/local/bin/kubeval

      - name: Test helm-lint hook
        run: |
          echo "=== Testing helm-lint hook ==="
          cd test-helm-repo

          # Test main chart (should pass)
          echo "Testing main chart..."
          if ../pre-commit-helm/hooks/helm-lint.sh; then
            echo "✅ Main chart lint passed as expected"
          else
            echo "❌ Main chart lint failed unexpectedly"
            exit 1
          fi

          # Test lint-failures chart (should fail with specific errors)
          if [ -d "test-charts/lint-failures" ]; then
            echo "Testing lint-failures chart..."
            cd test-charts/lint-failures

            # Capture output and exit code
            OUTPUT=$(../../../pre-commit-helm/hooks/helm-lint.sh 2>&1)
            EXIT_CODE=$?

            if [ $EXIT_CODE -eq 0 ]; then
              echo "❌ Lint failures chart passed but should have failed"
              echo "Output: $OUTPUT"
              exit 1
            fi

            # Check for specific expected errors
            ERRORS_FOUND=0

            if echo "$OUTPUT" | grep -q "version.*required\|version.*empty\|version.*missing"; then
              echo "✅ Found expected error: missing/empty version"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: version field issues"
            fi

            if [ $ERRORS_FOUND -lt 1 ]; then
              echo "❌ Not all expected lint errors were found"
              echo "Full output: $OUTPUT"
              exit 1
            fi

            echo "✅ Lint failures chart failed with expected errors ($ERRORS_FOUND expected)"
            cd ../..
          fi

          echo "helm-lint tests completed successfully"

      - name: Test helm-template hook
        run: |
          echo "=== Testing helm-template hook ==="
          cd test-helm-repo

          # Test main chart (should pass)
          echo "Testing main chart template..."
          if ../pre-commit-helm/hooks/helm-template.sh; then
            echo "✅ Main chart template passed as expected"
          else
            echo "❌ Main chart template failed unexpectedly"
            exit 1
          fi

          # Test template-errors chart (should fail with specific errors)
          if [ -d "test-charts/template-errors" ]; then
            echo "Testing template-errors chart..."
            cd test-charts/template-errors

            # Capture output and exit code
            OUTPUT=$(../../../pre-commit-helm/hooks/helm-template.sh 2>&1)
            EXIT_CODE=$?

            if [ $EXIT_CODE -eq 0 ]; then
              echo "❌ Template errors chart passed but should have failed"
              echo "Output: $OUTPUT"
              exit 1
            fi

            # Check for specific expected errors
            ERRORS_FOUND=0

            if echo "$OUTPUT" | grep -q "template.*not.*found\|template.*undefined\|template.*fullname\|template.*nonexistent"; then
              echo "✅ Found expected error: undefined template functions"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: undefined template functions"
            fi

            if echo "$OUTPUT" | grep -q "nil pointer\|undefined.*value\|nonexistent.*value\|Values.*nonexistent"; then
              echo "✅ Found expected error: undefined variables"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: undefined variables"
            fi

            if [ $ERRORS_FOUND -lt 1 ]; then
              echo "❌ Not all expected template errors were found"
              echo "Full output: $OUTPUT"
              exit 1
            fi

            echo "✅ Template errors chart failed with expected errors ($ERRORS_FOUND expected)"
            cd ../..
          fi

          echo "helm-template tests completed successfully"

      - name: Test helm-unittest hook
        run: |
          echo "=== Testing helm-unittest hook ==="
          cd test-helm-repo

          # Test main chart (should pass)
          echo "Testing main chart unit tests..."
          if ../pre-commit-helm/hooks/helm-unittest.sh; then
            echo "✅ Main chart unit tests passed as expected"
          else
            echo "❌ Main chart unit tests failed unexpectedly"
            exit 1
          fi

          # Test unittest-failures chart (should fail with specific errors)
          if [ -d "test-charts/unittest-failures" ]; then
            echo "Testing unittest-failures chart..."
            cd test-charts/unittest-failures

            # Capture output and exit code
            OUTPUT=$(../../../pre-commit-helm/hooks/helm-unittest.sh 2>&1)
            EXIT_CODE=$?

            if [ $EXIT_CODE -eq 0 ]; then
              echo "❌ Unit test failures chart passed but should have failed"
              echo "Output: $OUTPUT"
              exit 1
            fi

            # Check for specific expected errors
            ERRORS_FOUND=0

            if echo "$OUTPUT" | grep -q "replica.*count\|replicas.*1\|replicas.*2"; then
              echo "✅ Found expected error: replica count mismatch"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: replica count mismatch"
            fi

            if echo "$OUTPUT" | grep -q "nginx.*1\.21\|apache.*2\.4\|image.*mismatch"; then
              echo "✅ Found expected error: image mismatch"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: image mismatch"
            fi

            if echo "$OUTPUT" | grep -q "pullPolicy\|IfNotPresent\|Always"; then
              echo "✅ Found expected error: pull policy mismatch"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: pull policy mismatch"
            fi

            if [ $ERRORS_FOUND -lt 2 ]; then
              echo "❌ Not all expected unit test errors were found"
              echo "Full output: $OUTPUT"
              exit 1
            fi

            echo "✅ Unit test failures chart failed with expected errors ($ERRORS_FOUND/3)"
            cd ../..
          fi

          echo "helm-unittest tests completed successfully"

      - name: Test helm-docs hook
        run: |
          echo "=== Testing helm-docs hook ==="
          cd test-helm-repo

          # Test main chart (should pass)
          echo "Testing main chart docs..."
          if ../pre-commit-helm/hooks/helm-docs.sh; then
            echo "✅ Main chart docs passed as expected"
          else
            echo "❌ Main chart docs failed unexpectedly"
            exit 1
          fi

          # Test all problematic charts (may pass or fail depending on chart structure)
          if [ -d "test-charts" ]; then
            echo "Testing problematic charts docs..."
            for chart in test-charts/*/; do
              if [ -d "$chart" ]; then
                echo "Testing docs for: $chart"
                cd "$chart"

                # Capture output and exit code
                OUTPUT=$(../../../pre-commit-helm/hooks/helm-docs.sh 2>&1)
                EXIT_CODE=$?

                if [ $EXIT_CODE -eq 0 ]; then
                  echo "✅ Docs generation passed for $chart"
                else
                  echo "ℹ️  Docs generation failed for $chart (may be expected)"
                  echo "Output: $OUTPUT"
                fi

                cd ../..
              fi
            done
          fi

          echo "helm-docs tests completed successfully"

      - name: Test helm-security hook
        run: |
          echo "=== Testing helm-security hook ==="
          cd test-helm-repo

          # Test main chart (should pass)
          echo "Testing main chart security..."
          if ../pre-commit-helm/hooks/helm-security.sh; then
            echo "✅ Main chart security passed as expected"
          else
            echo "❌ Main chart security failed unexpectedly"
            exit 1
          fi

          # Test security-issues chart (should fail with specific errors)
          if [ -d "test-charts/security-issues" ]; then
            echo "Testing security-issues chart..."
            cd test-charts/security-issues

            # Capture output and exit code
            OUTPUT=$(../../../pre-commit-helm/hooks/helm-security.sh 2>&1)
            EXIT_CODE=$?

            if [ $EXIT_CODE -eq 0 ]; then
              echo "❌ Security issues chart passed but should have failed"
              echo "Output: $OUTPUT"
              exit 1
            fi

            # Check for specific expected errors
            ERRORS_FOUND=0

            if echo "$OUTPUT" | grep -q "nginx.*1\.16\|vulnerable.*image\|CVE\|security.*issue"; then
              echo "✅ Found expected error: vulnerable image version"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: vulnerable image version"
            fi

            if echo "$OUTPUT" | grep -q "runAsUser.*0\|root.*user\|privilege.*escalation\|allowPrivilegeEscalation.*true"; then
              echo "✅ Found expected error: root user or privilege escalation"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: root user or privilege escalation"
            fi

            if echo "$OUTPUT" | grep -q "SYS_ADMIN\|dangerous.*capabilit\|excessive.*privilege"; then
              echo "✅ Found expected error: dangerous capabilities"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: dangerous capabilities"
            fi

            if echo "$OUTPUT" | grep -q "SECRET_KEY\|hardcoded.*secret\|credential.*exposed"; then
              echo "✅ Found expected error: hardcoded secrets"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: hardcoded secrets"
            fi

            if [ $ERRORS_FOUND -lt 2 ]; then
              echo "❌ Not all expected security errors were found"
              echo "Full output: $OUTPUT"
              exit 1
            fi

            echo "✅ Security issues chart failed with expected errors ($ERRORS_FOUND/4)"
            cd ../..
          fi

          # Test bad security yaml file
          if [ -f "test-bad-security.yaml" ]; then
            echo "Testing bad security yaml..."

            # Capture output and exit code
            OUTPUT=$(../pre-commit-helm/hooks/helm-security.sh test-bad-security.yaml 2>&1)
            EXIT_CODE=$?

            if [ $EXIT_CODE -eq 0 ]; then
              echo "❌ Bad security yaml passed but should have failed"
              echo "Output: $OUTPUT"
              exit 1
            fi

            # Check for specific expected errors
            ERRORS_FOUND=0

            if echo "$OUTPUT" | grep -q "nginx.*latest\|latest.*tag\|avoid.*latest"; then
              echo "✅ Found expected error: latest tag usage"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: latest tag usage"
            fi

            if echo "$OUTPUT" | grep -q "runAsUser.*0\|root.*user\|privilege.*escalation\|allowPrivilegeEscalation.*true"; then
              echo "✅ Found expected error: security context issues"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: security context issues"
            fi

            if [ $ERRORS_FOUND -lt 1 ]; then
              echo "❌ Not all expected security errors were found in bad yaml"
              echo "Full output: $OUTPUT"
              exit 1
            fi

            echo "✅ Bad security yaml failed with expected errors ($ERRORS_FOUND expected)"
          fi

          echo "helm-security tests completed successfully"

      - name: Test helm-kubeval hook
        run: |
          echo "=== Testing helm-kubeval hook ==="
          cd test-helm-repo

          # Test main chart (should pass)
          echo "Testing main chart kubeval..."
          if ../pre-commit-helm/hooks/helm-kubeval.sh; then
            echo "✅ Main chart kubeval passed as expected"
          else
            echo "❌ Main chart kubeval failed unexpectedly"
            exit 1
          fi

          # Test template-errors chart (should fail)
          if [ -d "test-charts/template-errors" ]; then
            echo "Testing template-errors chart..."
            cd test-charts/template-errors

            # Capture output and exit code
            OUTPUT=$(../../../pre-commit-helm/hooks/helm-kubeval.sh 2>&1)
            EXIT_CODE=$?

            if [ $EXIT_CODE -eq 0 ]; then
              echo "❌ Template errors chart passed but should have failed"
              echo "Output: $OUTPUT"
              exit 1
            fi

            # Check for specific expected errors (template errors should cause kubeval to fail)
            ERRORS_FOUND=0

            if echo "$OUTPUT" | grep -q "template.*error\|rendering.*failed\|invalid.*yaml\|validation.*failed"; then
              echo "✅ Found expected error: template rendering or validation failure"
              ERRORS_FOUND=$((ERRORS_FOUND + 1))
            else
              echo "❌ Missing expected error: template rendering or validation failure"
            fi

            if [ $ERRORS_FOUND -lt 1 ]; then
              echo "❌ Not all expected kubeval errors were found"
              echo "Full output: $OUTPUT"
              exit 1
            fi

            echo "✅ Template errors chart failed with expected errors ($ERRORS_FOUND expected)"
            cd ../..
          fi

          echo "helm-kubeval tests completed successfully"

      - name: Test helm-dependency-update hook
        run: |
          echo "=== Testing helm-dependency-update hook ==="
          cd test-helm-repo

          # Test main chart (should pass)
          echo "Testing main chart dependency update..."
          if ../pre-commit-helm/hooks/helm-dependency-update.sh; then
            echo "✅ Main chart dependency update passed as expected"
          else
            echo "❌ Main chart dependency update failed unexpectedly"
            exit 1
          fi

          # Test all problematic charts (may pass or fail depending on dependencies)
          if [ -d "test-charts" ]; then
            echo "Testing problematic charts dependency update..."
            for chart in test-charts/*/; do
              if [ -d "$chart" ]; then
                echo "Testing dependency update for: $chart"
                cd "$chart"

                # Capture output and exit code
                OUTPUT=$(../../../pre-commit-helm/hooks/helm-dependency-update.sh 2>&1)
                EXIT_CODE=$?

                if [ $EXIT_CODE -eq 0 ]; then
                  echo "✅ Dependency update passed for $chart"
                else
                  echo "ℹ️  Dependency update failed for $chart (may be expected)"
                  # Check for specific dependency-related errors
                  if echo "$OUTPUT" | grep -q "dependency.*not.*found\|repository.*not.*found\|Chart\.lock.*missing"; then
                    echo "✅ Found expected dependency error"
                  else
                    echo "Output: $OUTPUT"
                  fi
                fi

                cd ../..
              fi
            done
          fi

          echo "helm-dependency-update tests completed successfully"

      - name: Test pre-commit integration
        run: |
          echo "=== Testing pre-commit integration ==="
          cd test-helm-repo

          # Initialize git config
          git config --global user.email "test@example.com"
          git config --global user.name "Test User"

          # Create pre-commit config that uses the hooks from the parent directory
          cat > .pre-commit-config.yaml << 'EOF'
          repos:
            - repo: local
              hooks:
                - id: helm-lint
                  name: Helm Lint
                  entry: ../pre-commit-helm/hooks/helm-lint.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|templates/.*\.yaml|templates/.*\.tpl)$'
                  pass_filenames: false
                  always_run: false
                - id: helm-template
                  name: Helm Template
                  entry: ../pre-commit-helm/hooks/helm-template.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|templates/.*\.yaml|templates/.*\.tpl)$'
                  pass_filenames: false
                  always_run: false
                - id: helm-unittest
                  name: Helm Unit Test
                  entry: ../pre-commit-helm/hooks/helm-unittest.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|templates/.*\.yaml|templates/.*\.tpl|tests/.*\.yaml)$'
                  pass_filenames: false
                  always_run: false
                - id: helm-docs
                  name: Helm Docs
                  entry: ../pre-commit-helm/hooks/helm-docs.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|README\.md)$'
                  pass_filenames: false
                  always_run: false
                - id: helm-kubeval
                  name: Helm Kubeval
                  entry: ../pre-commit-helm/hooks/helm-kubeval.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|templates/.*\.yaml|templates/.*\.tpl)$'
                  pass_filenames: false
                  always_run: false
                - id: helm-security
                  name: Helm Security
                  entry: ../pre-commit-helm/hooks/helm-security.sh
                  language: script
                  files: '(Chart\.yaml|values\.yaml|templates/.*\.yaml|templates/.*\.tpl)$'
                  pass_filenames: false
                  always_run: false
                - id: helm-dependency-update
                  name: Helm Dependency Update
                  entry: ../pre-commit-helm/hooks/helm-dependency-update.sh
                  language: script
                  files: '(Chart\.yaml|Chart\.lock)$'
                  pass_filenames: false
                  always_run: false
          EOF

          # Install pre-commit hooks
          echo "Installing pre-commit hooks..."
          pre-commit install || echo "Pre-commit install failed"

          # Run pre-commit on all files (this should catch the failing scenarios)
          echo "Running pre-commit on all files..."

          # Capture output and exit code
          OUTPUT=$(pre-commit run --all-files 2>&1)
          EXIT_CODE=$?

          if [ $EXIT_CODE -eq 0 ]; then
            echo "❌ Pre-commit run passed but should have failed due to intentional failures"
            echo "Output: $OUTPUT"
            exit 1
          fi

          # Check that pre-commit caught the expected failures
          HOOKS_FAILED=0

          if echo "$OUTPUT" | grep -q "helm-lint.*failed\|helm-lint.*error"; then
            echo "✅ Pre-commit caught helm-lint failures"
            HOOKS_FAILED=$((HOOKS_FAILED + 1))
          else
            echo "❌ Pre-commit did not catch helm-lint failures"
          fi

          if echo "$OUTPUT" | grep -q "helm-template.*failed\|helm-template.*error"; then
            echo "✅ Pre-commit caught helm-template failures"
            HOOKS_FAILED=$((HOOKS_FAILED + 1))
          else
            echo "❌ Pre-commit did not catch helm-template failures"
          fi

          if echo "$OUTPUT" | grep -q "helm-unittest.*failed\|helm-unittest.*error"; then
            echo "✅ Pre-commit caught helm-unittest failures"
            HOOKS_FAILED=$((HOOKS_FAILED + 1))
          else
            echo "❌ Pre-commit did not catch helm-unittest failures"
          fi

          if echo "$OUTPUT" | grep -q "helm-security.*failed\|helm-security.*error"; then
            echo "✅ Pre-commit caught helm-security failures"
            HOOKS_FAILED=$((HOOKS_FAILED + 1))
          else
            echo "❌ Pre-commit did not catch helm-security failures"
          fi

          if [ $HOOKS_FAILED -lt 2 ]; then
            echo "❌ Pre-commit did not catch enough hook failures"
            echo "Full output: $OUTPUT"
            exit 1
          fi

          echo "✅ Pre-commit integration failed with expected hook failures ($HOOKS_FAILED hooks failed)"
          echo "Pre-commit integration tests completed successfully"

      - name: Summary
        run: |
          echo "=== Test Summary ==="
          echo "All pre-commit hooks have been tested against the test-helm-repo with comprehensive validation"
          echo ""
          echo "The improved tests validate:"
          echo "1. ✅ Main chart passes (good practices)"
          echo "2. ❌ Problematic charts fail with specific expected errors"
          echo "3. 🔍 Each hook correctly identifies the right types of issues"
          echo "4. 📋 Exit codes are properly validated"
          echo "5. 🎯 Error messages match expected patterns"
          echo ""
          echo "Specific error validations:"
          echo "• helm-lint: Missing/empty version field"
          echo "• helm-template: Undefined functions, nonexistent variables"
          echo "• helm-unittest: Replica/image/policy mismatches"
          echo "• helm-security: Vulnerable images, root users, dangerous capabilities"
          echo "• helm-kubeval: Template rendering failures"
          echo ""
          echo "✅ All hooks are working correctly and catching the expected issues!"
          echo "🎉 Comprehensive hook testing completed successfully!"
